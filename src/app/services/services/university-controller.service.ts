/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addUniversity } from '../fn/university-controller/add-university';
import { AddUniversity$Params } from '../fn/university-controller/add-university';
import { deleteUniversityById } from '../fn/university-controller/delete-university-by-id';
import { DeleteUniversityById$Params } from '../fn/university-controller/delete-university-by-id';
import { getAllUniversities } from '../fn/university-controller/get-all-universities';
import { GetAllUniversities$Params } from '../fn/university-controller/get-all-universities';
import { getUniversitiesByType } from '../fn/university-controller/get-universities-by-type';
import { GetUniversitiesByType$Params } from '../fn/university-controller/get-universities-by-type';
import { getUniversityById1 } from '../fn/university-controller/get-university-by-id-1';
import { GetUniversityById1$Params } from '../fn/university-controller/get-university-by-id-1';
import { University } from '../models/university';
import { updateUniversity } from '../fn/university-controller/update-university';
import { UpdateUniversity$Params } from '../fn/university-controller/update-university';

@Injectable({ providedIn: 'root' })
export class UniversityControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUniversity()` */
  static readonly UpdateUniversityPath = '/auth/updateUniverity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUniversity()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUniversity$Response(params: UpdateUniversity$Params, context?: HttpContext): Observable<StrictHttpResponse<University>> {
    return updateUniversity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUniversity$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUniversity(params: UpdateUniversity$Params, context?: HttpContext): Observable<University> {
    return this.updateUniversity$Response(params, context).pipe(
      map((r: StrictHttpResponse<University>): University => r.body)
    );
  }

  /** Path part for operation `addUniversity()` */
  static readonly AddUniversityPath = '/auth/add/university';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUniversity()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUniversity$Response(params: AddUniversity$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<University>>> {
    return addUniversity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUniversity$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUniversity(params: AddUniversity$Params, context?: HttpContext): Observable<Array<University>> {
    return this.addUniversity$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<University>>): Array<University> => r.body)
    );
  }

  /** Path part for operation `getUniversitiesByType()` */
  static readonly GetUniversitiesByTypePath = '/auth/type/{type}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUniversitiesByType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUniversitiesByType$Response(params: GetUniversitiesByType$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<University>>> {
    return getUniversitiesByType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUniversitiesByType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUniversitiesByType(params: GetUniversitiesByType$Params, context?: HttpContext): Observable<Array<University>> {
    return this.getUniversitiesByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<University>>): Array<University> => r.body)
    );
  }

  /** Path part for operation `getUniversityById1()` */
  static readonly GetUniversityById1Path = '/auth/getUniversityById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUniversityById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUniversityById1$Response(params: GetUniversityById1$Params, context?: HttpContext): Observable<StrictHttpResponse<University>> {
    return getUniversityById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUniversityById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUniversityById1(params: GetUniversityById1$Params, context?: HttpContext): Observable<University> {
    return this.getUniversityById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<University>): University => r.body)
    );
  }

  /** Path part for operation `getAllUniversities()` */
  static readonly GetAllUniversitiesPath = '/auth/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUniversities()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUniversities$Response(params?: GetAllUniversities$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<University>>> {
    return getAllUniversities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUniversities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUniversities(params?: GetAllUniversities$Params, context?: HttpContext): Observable<Array<University>> {
    return this.getAllUniversities$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<University>>): Array<University> => r.body)
    );
  }

  /** Path part for operation `deleteUniversityById()` */
  static readonly DeleteUniversityByIdPath = '/auth/deleteUniversityById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUniversityById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUniversityById$Response(params: DeleteUniversityById$Params, context?: HttpContext): Observable<StrictHttpResponse<University>> {
    return deleteUniversityById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUniversityById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUniversityById(params: DeleteUniversityById$Params, context?: HttpContext): Observable<University> {
    return this.deleteUniversityById$Response(params, context).pipe(
      map((r: StrictHttpResponse<University>): University => r.body)
    );
  }

}
