/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Biodata } from '../models/biodata';
import { BiodataDto } from '../models/biodata-dto';
import { BiodataResponse } from '../models/biodata-response';
import { createBiodata } from '../fn/biodata-controller/create-biodata';
import { CreateBiodata$Params } from '../fn/biodata-controller/create-biodata';
import { deleteBiodata } from '../fn/biodata-controller/delete-biodata';
import { DeleteBiodata$Params } from '../fn/biodata-controller/delete-biodata';
import { findByEmail } from '../fn/biodata-controller/find-by-email';
import { FindByEmail$Params } from '../fn/biodata-controller/find-by-email';
import { getAllBiodata } from '../fn/biodata-controller/get-all-biodata';
import { GetAllBiodata$Params } from '../fn/biodata-controller/get-all-biodata';
import { getAllRegions } from '../fn/biodata-controller/get-all-regions';
import { GetAllRegions$Params } from '../fn/biodata-controller/get-all-regions';
import { getBiodataById } from '../fn/biodata-controller/get-biodata-by-id';
import { GetBiodataById$Params } from '../fn/biodata-controller/get-biodata-by-id';
import { getBiodataByRecordId } from '../fn/biodata-controller/get-biodata-by-record-id';
import { GetBiodataByRecordId$Params } from '../fn/biodata-controller/get-biodata-by-record-id';
import { getRegionStatistics } from '../fn/biodata-controller/get-region-statistics';
import { GetRegionStatistics$Params } from '../fn/biodata-controller/get-region-statistics';
import { RegionStatsResponse } from '../models/region-stats-response';
import { updateBiodata } from '../fn/biodata-controller/update-biodata';
import { UpdateBiodata$Params } from '../fn/biodata-controller/update-biodata';
import { updateBiodata1 } from '../fn/biodata-controller/update-biodata-1';
import { UpdateBiodata1$Params } from '../fn/biodata-controller/update-biodata-1';

@Injectable({ providedIn: 'root' })
export class BiodataControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getBiodataById()` */
  static readonly GetBiodataByIdPath = '/auth/biodata/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBiodataById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBiodataById$Response(params: GetBiodataById$Params, context?: HttpContext): Observable<StrictHttpResponse<BiodataDto>> {
    return getBiodataById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBiodataById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBiodataById(params: GetBiodataById$Params, context?: HttpContext): Observable<BiodataDto> {
    return this.getBiodataById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BiodataDto>): BiodataDto => r.body)
    );
  }

  /** Path part for operation `updateBiodata()` */
  static readonly UpdateBiodataPath = '/auth/biodata/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBiodata()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBiodata$Response(params: UpdateBiodata$Params, context?: HttpContext): Observable<StrictHttpResponse<Biodata>> {
    return updateBiodata(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBiodata$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBiodata(params: UpdateBiodata$Params, context?: HttpContext): Observable<Biodata> {
    return this.updateBiodata$Response(params, context).pipe(
      map((r: StrictHttpResponse<Biodata>): Biodata => r.body)
    );
  }

  /** Path part for operation `deleteBiodata()` */
  static readonly DeleteBiodataPath = '/auth/biodata/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBiodata()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBiodata$Response(params: DeleteBiodata$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBiodata(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBiodata$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBiodata(params: DeleteBiodata$Params, context?: HttpContext): Observable<void> {
    return this.deleteBiodata$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateBiodata1()` */
  static readonly UpdateBiodata1Path = '/auth/biodata/updateBiodata';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBiodata1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBiodata1$Response(params: UpdateBiodata1$Params, context?: HttpContext): Observable<StrictHttpResponse<Biodata>> {
    return updateBiodata1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBiodata1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBiodata1(params: UpdateBiodata1$Params, context?: HttpContext): Observable<Biodata> {
    return this.updateBiodata1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Biodata>): Biodata => r.body)
    );
  }

  /** Path part for operation `createBiodata()` */
  static readonly CreateBiodataPath = '/auth/biodata/addBiodata';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBiodata()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBiodata$Response(params: CreateBiodata$Params, context?: HttpContext): Observable<StrictHttpResponse<Biodata>> {
    return createBiodata(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBiodata$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBiodata(params: CreateBiodata$Params, context?: HttpContext): Observable<Biodata> {
    return this.createBiodata$Response(params, context).pipe(
      map((r: StrictHttpResponse<Biodata>): Biodata => r.body)
    );
  }

  /** Path part for operation `getRegionStatistics()` */
  static readonly GetRegionStatisticsPath = '/auth/biodata/stats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRegionStatistics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRegionStatistics$Response(params?: GetRegionStatistics$Params, context?: HttpContext): Observable<StrictHttpResponse<RegionStatsResponse>> {
    return getRegionStatistics(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRegionStatistics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRegionStatistics(params?: GetRegionStatistics$Params, context?: HttpContext): Observable<RegionStatsResponse> {
    return this.getRegionStatistics$Response(params, context).pipe(
      map((r: StrictHttpResponse<RegionStatsResponse>): RegionStatsResponse => r.body)
    );
  }

  /** Path part for operation `findByEmail()` */
  static readonly FindByEmailPath = '/auth/biodata/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByEmail$Response(params: FindByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<Biodata>> {
    return findByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByEmail(params: FindByEmail$Params, context?: HttpContext): Observable<Biodata> {
    return this.findByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<Biodata>): Biodata => r.body)
    );
  }

  /** Path part for operation `getAllBiodata()` */
  static readonly GetAllBiodataPath = '/auth/biodata/getAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBiodata()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBiodata$Response(params?: GetAllBiodata$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BiodataDto>>> {
    return getAllBiodata(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBiodata$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBiodata(params?: GetAllBiodata$Params, context?: HttpContext): Observable<Array<BiodataDto>> {
    return this.getAllBiodata$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BiodataDto>>): Array<BiodataDto> => r.body)
    );
  }

  /** Path part for operation `getAllRegions()` */
  static readonly GetAllRegionsPath = '/auth/biodata/getAllRegions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRegions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRegions$Response(params?: GetAllRegions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<'ASHANTI' | 'BRONG_AHAFO' | 'CENTRAL' | 'EASTERN' | 'GREATER_ACCRA' | 'NORTHERN' | 'UPPER_EAST' | 'UPPER_WEST' | 'VOLTA' | 'WESTERN'>>> {
    return getAllRegions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRegions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRegions(params?: GetAllRegions$Params, context?: HttpContext): Observable<Array<'ASHANTI' | 'BRONG_AHAFO' | 'CENTRAL' | 'EASTERN' | 'GREATER_ACCRA' | 'NORTHERN' | 'UPPER_EAST' | 'UPPER_WEST' | 'VOLTA' | 'WESTERN'>> {
    return this.getAllRegions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<'ASHANTI' | 'BRONG_AHAFO' | 'CENTRAL' | 'EASTERN' | 'GREATER_ACCRA' | 'NORTHERN' | 'UPPER_EAST' | 'UPPER_WEST' | 'VOLTA' | 'WESTERN'>>): Array<'ASHANTI' | 'BRONG_AHAFO' | 'CENTRAL' | 'EASTERN' | 'GREATER_ACCRA' | 'NORTHERN' | 'UPPER_EAST' | 'UPPER_WEST' | 'VOLTA' | 'WESTERN'> => r.body)
    );
  }

  /** Path part for operation `getBiodataByRecordId()` */
  static readonly GetBiodataByRecordIdPath = '/auth/biodata/byrecordId/{recordId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBiodataByRecordId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBiodataByRecordId$Response(params: GetBiodataByRecordId$Params, context?: HttpContext): Observable<StrictHttpResponse<BiodataResponse>> {
    return getBiodataByRecordId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBiodataByRecordId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBiodataByRecordId(params: GetBiodataByRecordId$Params, context?: HttpContext): Observable<BiodataResponse> {
    return this.getBiodataByRecordId$Response(params, context).pipe(
      map((r: StrictHttpResponse<BiodataResponse>): BiodataResponse => r.body)
    );
  }

}
