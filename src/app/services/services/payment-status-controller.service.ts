/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createPaymentStatus } from '../fn/payment-status-controller/create-payment-status';
import { CreatePaymentStatus$Params } from '../fn/payment-status-controller/create-payment-status';
import { DailyPaymentSummary } from '../models/daily-payment-summary';
import { deleteById } from '../fn/payment-status-controller/delete-by-id';
import { DeleteById$Params } from '../fn/payment-status-controller/delete-by-id';
import { getAllPaymentStatuses } from '../fn/payment-status-controller/get-all-payment-statuses';
import { GetAllPaymentStatuses$Params } from '../fn/payment-status-controller/get-all-payment-statuses';
import { getByExternalRef } from '../fn/payment-status-controller/get-by-external-ref';
import { GetByExternalRef$Params } from '../fn/payment-status-controller/get-by-external-ref';
import { getById1 } from '../fn/payment-status-controller/get-by-id-1';
import { GetById1$Params } from '../fn/payment-status-controller/get-by-id-1';
import { getDailyPaymentStats } from '../fn/payment-status-controller/get-daily-payment-stats';
import { GetDailyPaymentStats$Params } from '../fn/payment-status-controller/get-daily-payment-stats';
import { getDailyPaymentStats1 } from '../fn/payment-status-controller/get-daily-payment-stats-1';
import { GetDailyPaymentStats1$Params } from '../fn/payment-status-controller/get-daily-payment-stats-1';
import { getMonthlyRevenue } from '../fn/payment-status-controller/get-monthly-revenue';
import { GetMonthlyRevenue$Params } from '../fn/payment-status-controller/get-monthly-revenue';
import { getPaymentByTransaction } from '../fn/payment-status-controller/get-payment-by-transaction';
import { GetPaymentByTransaction$Params } from '../fn/payment-status-controller/get-payment-by-transaction';
import { getRevenueBetweenDates } from '../fn/payment-status-controller/get-revenue-between-dates';
import { GetRevenueBetweenDates$Params } from '../fn/payment-status-controller/get-revenue-between-dates';
import { getRevenueByUser } from '../fn/payment-status-controller/get-revenue-by-user';
import { GetRevenueByUser$Params } from '../fn/payment-status-controller/get-revenue-by-user';
import { getTotalRevenue } from '../fn/payment-status-controller/get-total-revenue';
import { GetTotalRevenue$Params } from '../fn/payment-status-controller/get-total-revenue';
import { getWeeklyRevenue } from '../fn/payment-status-controller/get-weekly-revenue';
import { GetWeeklyRevenue$Params } from '../fn/payment-status-controller/get-weekly-revenue';
import { MonthlyRevenueSummary } from '../models/monthly-revenue-summary';
import { paymentForFarmer } from '../fn/payment-status-controller/payment-for-farmer';
import { PaymentForFarmer$Params } from '../fn/payment-status-controller/payment-for-farmer';
import { PaymentStatusResponseDto } from '../models/payment-status-response-dto';
import { PaymentStatuss } from '../models/payment-statuss';
import { WeeklyRevenueSummary } from '../models/weekly-revenue-summary';

@Injectable({ providedIn: 'root' })
export class PaymentStatusControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createPaymentStatus()` */
  static readonly CreatePaymentStatusPath = '/auth/payment-status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPaymentStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPaymentStatus$Response(params: CreatePaymentStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentStatuss>> {
    return createPaymentStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPaymentStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPaymentStatus(params: CreatePaymentStatus$Params, context?: HttpContext): Observable<PaymentStatuss> {
    return this.createPaymentStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentStatuss>): PaymentStatuss => r.body)
    );
  }

  /** Path part for operation `getRevenueByUser()` */
  static readonly GetRevenueByUserPath = '/auth/payment-status/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRevenueByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRevenueByUser$Response(params: GetRevenueByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getRevenueByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRevenueByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRevenueByUser(params: GetRevenueByUser$Params, context?: HttpContext): Observable<number> {
    return this.getRevenueByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getPaymentByTransaction()` */
  static readonly GetPaymentByTransactionPath = '/auth/payment-status/transaction/{transactionId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaymentByTransaction()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentByTransaction$Response(params: GetPaymentByTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentStatuss>> {
    return getPaymentByTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaymentByTransaction$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaymentByTransaction(params: GetPaymentByTransaction$Params, context?: HttpContext): Observable<PaymentStatuss> {
    return this.getPaymentByTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentStatuss>): PaymentStatuss => r.body)
    );
  }

  /** Path part for operation `getTotalRevenue()` */
  static readonly GetTotalRevenuePath = '/auth/payment-status/total-revenue';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTotalRevenue()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalRevenue$Response(params?: GetTotalRevenue$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTotalRevenue(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTotalRevenue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalRevenue(params?: GetTotalRevenue$Params, context?: HttpContext): Observable<number> {
    return this.getTotalRevenue$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getDailyPaymentStats()` */
  static readonly GetDailyPaymentStatsPath = '/auth/payment-status/revenuesDaily';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDailyPaymentStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailyPaymentStats$Response(params: GetDailyPaymentStats$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyPaymentSummary>>> {
    return getDailyPaymentStats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDailyPaymentStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailyPaymentStats(params: GetDailyPaymentStats$Params, context?: HttpContext): Observable<Array<DailyPaymentSummary>> {
    return this.getDailyPaymentStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyPaymentSummary>>): Array<DailyPaymentSummary> => r.body)
    );
  }

  /** Path part for operation `getWeeklyRevenue()` */
  static readonly GetWeeklyRevenuePath = '/auth/payment-status/revenueWeekly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWeeklyRevenue()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWeeklyRevenue$Response(params: GetWeeklyRevenue$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<WeeklyRevenueSummary>>> {
    return getWeeklyRevenue(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWeeklyRevenue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWeeklyRevenue(params: GetWeeklyRevenue$Params, context?: HttpContext): Observable<Array<WeeklyRevenueSummary>> {
    return this.getWeeklyRevenue$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<WeeklyRevenueSummary>>): Array<WeeklyRevenueSummary> => r.body)
    );
  }

  /** Path part for operation `getMonthlyRevenue()` */
  static readonly GetMonthlyRevenuePath = '/auth/payment-status/revenueMonthly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMonthlyRevenue()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMonthlyRevenue$Response(params: GetMonthlyRevenue$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MonthlyRevenueSummary>>> {
    return getMonthlyRevenue(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMonthlyRevenue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMonthlyRevenue(params: GetMonthlyRevenue$Params, context?: HttpContext): Observable<Array<MonthlyRevenueSummary>> {
    return this.getMonthlyRevenue$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MonthlyRevenueSummary>>): Array<MonthlyRevenueSummary> => r.body)
    );
  }

  /** Path part for operation `getDailyPaymentStats1()` */
  static readonly GetDailyPaymentStats1Path = '/auth/payment-status/revenueDaily';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDailyPaymentStats1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailyPaymentStats1$Response(params: GetDailyPaymentStats1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyPaymentSummary>>> {
    return getDailyPaymentStats1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDailyPaymentStats1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailyPaymentStats1(params: GetDailyPaymentStats1$Params, context?: HttpContext): Observable<Array<DailyPaymentSummary>> {
    return this.getDailyPaymentStats1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyPaymentSummary>>): Array<DailyPaymentSummary> => r.body)
    );
  }

  /** Path part for operation `getRevenueBetweenDates()` */
  static readonly GetRevenueBetweenDatesPath = '/auth/payment-status/period';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRevenueBetweenDates()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRevenueBetweenDates$Response(params: GetRevenueBetweenDates$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getRevenueBetweenDates(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRevenueBetweenDates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRevenueBetweenDates(params: GetRevenueBetweenDates$Params, context?: HttpContext): Observable<number> {
    return this.getRevenueBetweenDates$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getAllPaymentStatuses()` */
  static readonly GetAllPaymentStatusesPath = '/auth/payment-status/getAllPayments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPaymentStatuses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPaymentStatuses$Response(params?: GetAllPaymentStatuses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PaymentStatuss>>> {
    return getAllPaymentStatuses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPaymentStatuses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPaymentStatuses(params?: GetAllPaymentStatuses$Params, context?: HttpContext): Observable<Array<PaymentStatuss>> {
    return this.getAllPaymentStatuses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PaymentStatuss>>): Array<PaymentStatuss> => r.body)
    );
  }

  /** Path part for operation `paymentForFarmer()` */
  static readonly PaymentForFarmerPath = '/auth/payment-status/forFarmer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `paymentForFarmer()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentForFarmer$Response(params?: PaymentForFarmer$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PaymentStatusResponseDto>>> {
    return paymentForFarmer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `paymentForFarmer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  paymentForFarmer(params?: PaymentForFarmer$Params, context?: HttpContext): Observable<Array<PaymentStatusResponseDto>> {
    return this.paymentForFarmer$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PaymentStatusResponseDto>>): Array<PaymentStatusResponseDto> => r.body)
    );
  }

  /** Path part for operation `getByExternalRef()` */
  static readonly GetByExternalRefPath = '/auth/payment-status/external/{externalRef}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByExternalRef()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByExternalRef$Response(params: GetByExternalRef$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentStatuss>> {
    return getByExternalRef(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByExternalRef$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByExternalRef(params: GetByExternalRef$Params, context?: HttpContext): Observable<PaymentStatuss> {
    return this.getByExternalRef$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentStatuss>): PaymentStatuss => r.body)
    );
  }

  /** Path part for operation `getById1()` */
  static readonly GetById1Path = '/auth/payment-status/byId/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById1$Response(params: GetById1$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentStatuss>> {
    return getById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById1(params: GetById1$Params, context?: HttpContext): Observable<PaymentStatuss> {
    return this.getById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentStatuss>): PaymentStatuss => r.body)
    );
  }

  /** Path part for operation `deleteById()` */
  static readonly DeleteByIdPath = '/auth/payment-status/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById$Response(params: DeleteById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteById(params: DeleteById$Params, context?: HttpContext): Observable<void> {
    return this.deleteById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
