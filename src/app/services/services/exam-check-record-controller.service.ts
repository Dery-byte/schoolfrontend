/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create } from '../fn/exam-check-record-controller/create';
import { Create$Params } from '../fn/exam-check-record-controller/create';
import { delete$ } from '../fn/exam-check-record-controller/delete';
import { Delete$Params } from '../fn/exam-check-record-controller/delete';
import { ExamCheckRecord } from '../models/exam-check-record';
import { getById } from '../fn/exam-check-record-controller/get-by-id';
import { GetById$Params } from '../fn/exam-check-record-controller/get-by-id';
import { getByUser } from '../fn/exam-check-record-controller/get-by-user';
import { GetByUser$Params } from '../fn/exam-check-record-controller/get-by-user';
import { update } from '../fn/exam-check-record-controller/update';
import { Update$Params } from '../fn/exam-check-record-controller/update';
import { updateCandidate } from '../fn/exam-check-record-controller/update-candidate';
import { UpdateCandidate$Params } from '../fn/exam-check-record-controller/update-candidate';
import { updatePaymentStatus } from '../fn/exam-check-record-controller/update-payment-status';
import { UpdatePaymentStatus$Params } from '../fn/exam-check-record-controller/update-payment-status';

@Injectable({ providedIn: 'root' })
export class ExamCheckRecordControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/auth/records/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<ExamCheckRecord>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<ExamCheckRecord> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExamCheckRecord>): ExamCheckRecord => r.body)
    );
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/auth/records/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<ExamCheckRecord>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<ExamCheckRecord> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExamCheckRecord>): ExamCheckRecord => r.body)
    );
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/auth/records/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params: Delete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return delete$(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params: Delete$Params, context?: HttpContext): Observable<void> {
    return this.delete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `create()` */
  static readonly CreatePath = '/auth/records/createCheckRecords';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<ExamCheckRecord>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<ExamCheckRecord> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExamCheckRecord>): ExamCheckRecord => r.body)
    );
  }

  /** Path part for operation `updatePaymentStatus()` */
  static readonly UpdatePaymentStatusPath = '/auth/records/{id}/paymentStatus';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePaymentStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePaymentStatus$Response(params: UpdatePaymentStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<ExamCheckRecord>> {
    return updatePaymentStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePaymentStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePaymentStatus(params: UpdatePaymentStatus$Params, context?: HttpContext): Observable<ExamCheckRecord> {
    return this.updatePaymentStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExamCheckRecord>): ExamCheckRecord => r.body)
    );
  }

  /** Path part for operation `updateCandidate()` */
  static readonly UpdateCandidatePath = '/auth/records/{id}/candidate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCandidate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCandidate$Response(params: UpdateCandidate$Params, context?: HttpContext): Observable<StrictHttpResponse<ExamCheckRecord>> {
    return updateCandidate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCandidate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCandidate(params: UpdateCandidate$Params, context?: HttpContext): Observable<ExamCheckRecord> {
    return this.updateCandidate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExamCheckRecord>): ExamCheckRecord => r.body)
    );
  }

  /** Path part for operation `getByUser()` */
  static readonly GetByUserPath = '/auth/records/RecordsByUserId';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByUser$Response(params?: GetByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExamCheckRecord>>> {
    return getByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByUser(params?: GetByUser$Params, context?: HttpContext): Observable<Array<ExamCheckRecord>> {
    return this.getByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExamCheckRecord>>): Array<ExamCheckRecord> => r.body)
    );
  }

}
