/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getStatus } from '../fn/payment-controller/get-status';
import { GetStatus$Params } from '../fn/payment-controller/get-status';
import { handlePaymentStatus } from '../fn/payment-controller/handle-payment-status';
import { HandlePaymentStatus$Params } from '../fn/payment-controller/handle-payment-status';
import { initiatePayment } from '../fn/payment-controller/initiate-payment';
import { InitiatePayment$Params } from '../fn/payment-controller/initiate-payment';
import { MoolrePaymentResponse } from '../models/moolre-payment-response';
import { PaymentStatuss } from '../models/payment-statuss';
import { verifyOtpAndProceed } from '../fn/payment-controller/verify-otp-and-proceed';
import { VerifyOtpAndProceed$Params } from '../fn/payment-controller/verify-otp-and-proceed';

@Injectable({ providedIn: 'root' })
export class PaymentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `verifyOtpAndProceed()` */
  static readonly VerifyOtpAndProceedPath = '/auth/payments/verify-otp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyOtpAndProceed()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyOtpAndProceed$Response(params: VerifyOtpAndProceed$Params, context?: HttpContext): Observable<StrictHttpResponse<MoolrePaymentResponse>> {
    return verifyOtpAndProceed(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyOtpAndProceed$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyOtpAndProceed(params: VerifyOtpAndProceed$Params, context?: HttpContext): Observable<MoolrePaymentResponse> {
    return this.verifyOtpAndProceed$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoolrePaymentResponse>): MoolrePaymentResponse => r.body)
    );
  }

  /** Path part for operation `handlePaymentStatus()` */
  static readonly HandlePaymentStatusPath = '/auth/payments/statusWebhook';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handlePaymentStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handlePaymentStatus$Response(params?: HandlePaymentStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return handlePaymentStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handlePaymentStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handlePaymentStatus(params?: HandlePaymentStatus$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.handlePaymentStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `initiatePayment()` */
  static readonly InitiatePaymentPath = '/auth/payments/initiate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `initiatePayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiatePayment$Response(params: InitiatePayment$Params, context?: HttpContext): Observable<StrictHttpResponse<MoolrePaymentResponse>> {
    return initiatePayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `initiatePayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiatePayment(params: InitiatePayment$Params, context?: HttpContext): Observable<MoolrePaymentResponse> {
    return this.initiatePayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<MoolrePaymentResponse>): MoolrePaymentResponse => r.body)
    );
  }

  /** Path part for operation `getStatus()` */
  static readonly GetStatusPath = '/auth/payments/payment-status/{externalRef}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStatus$Response(params: GetStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentStatuss>> {
    return getStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStatus(params: GetStatus$Params, context?: HttpContext): Observable<PaymentStatuss> {
    return this.getStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentStatuss>): PaymentStatuss => r.body)
    );
  }

}
